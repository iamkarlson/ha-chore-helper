[project]
name = "ha-chore-helper"
version = "0.1.0"
description = "A Home Assistant helper integration for managing recurring chores"
readme = "README.md"
requires-python = ">=3.13.2"
authors = [
    { name = "Your Name", email = "your.email@example.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]

# Core dependencies - minimal since HA is pre-installed in the container
dependencies = []

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-homeassistant-custom-component>=0.13.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pylint>=2.17.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "ruff>=0.1.0",
]

# Test dependencies
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-homeassistant-custom-component>=0.13.0",
    "freezegun>=1.2.0",
]

# Tool configuration for Home Assistant custom component development

# Black formatting
[tool.black]
target-version = ["py313"]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["custom_components.chore_helper", "tests"]
known_third_party = ["homeassistant"]

# Ruff linting
[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B028",  # No explicit stacklevel
    "B904",  # Use raise from
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

# MyPy type checking
[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_optional = true
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
norecursedirs = [".git", "testing_config"]
asyncio_mode = "auto"
addopts = """
    --strict-config
    --strict-markers
    --cov=custom_components.chore_helper
    --cov-report=term-missing
    --cov-report=xml
    --cov-report=html
    --cov-fail-under=80
"""

# Coverage configuration
[tool.coverage.run]
source = ["custom_components"]
omit = [
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
